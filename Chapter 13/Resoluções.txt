Chapter 13 Self Test

1. Generics are important to Java because they enable the creation of code that is
A. Type-safe
B. Reusable
C. Reliable
D. All of the above

R: B

2. Can a primitive type be used as a type argument?
R: Yes

3. Show how to declare a class called FlightSched that takes two generic parameters.
R: class FlightSched <T,V> {..}

4. Beginning with your answer to question 3, change FlightSchedâ€™s second type parameter so that it must extend Thread.
R: class FlightSched <T,V extends Thread> {..}

5. Now, change FlightSched so that its second type parameter must be a subclass of its first type parameter.
R: class FlightSched <T,V extends T>{..}

6. As it relates to generics, what is the ? and what does it do?
R: It is used as wildcard which puts limits to the super class who is coming

7. Can the wildcard argument be bounded?
R: Yes, it can be

8. A generic method called MyGen( ) has one type parameter. Furthermore, MyGen( ) has one parameter whose type is that of the type parameter. It also returns an object of that type parameter. Show how to declare MyGen( ).
R: 
Gen(T) {
	ob = T;
}

9. Given this generic interface
interface IGenIF<T, V extends T> { // ...
show the declaration of a class called MyClass that implements IGenIF
R: class MyClass implements IGenIF {...}

10. Given a generic class called Counter<T>, show how to create an object of its raw type.
R: Counter<Integer> variable = new Counter(10);

11. Do type parameters exist at run time?
R: Not, it is substitued by the Object class if it is not know at the compile time

13. What is < >?
R: The symbol < > in Java is called diamond operator or angle brackets, and it is used in generics to specify type parameters

14. How can the following be simplified?
MyClass<Double,String> obj = new MyClass<Double,String>(1.1,"Hi");
R: MyClass obj = new MyClass(1.1,"Hi");